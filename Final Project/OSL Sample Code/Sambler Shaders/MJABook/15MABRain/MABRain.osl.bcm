<?xml version="1.0" encoding="UTF-8"?>
<material name="MABRain" view_color="rgb(0.80000, 0.80000, 0.80000)" sample_lamp="True">
	<nodes>
		<node type="BUMP" strength="0.10000" height="100" width="140" width_hidden="42" loc="1238, 236" />
		<node type="BSDF_GLOSSY" distribution="BECKMANN" color="rgba(0.80000, 0.80000, 0.80000, 1.0)" roughness="0.0" height="100" width="150" width_hidden="42" loc="1428, 269" />
		<node type="SCRIPT" mode="INTERNAL" script="0" vector="Vector(0.0, 0.0, 0.0)" scale="5.0" drops="2" time="7.45058" starttime="0.0" endtime="10.0" amplitude="1.0" wavelength="0.02999" spread="0.02999" limit="1.89999" damping="0.5" height="100" width="193" width_hidden="42" loc="987, 220" />
		<node type="TEX_COORD" dupli="False" height="100" width="140" width_hidden="42" loc="795, 190" />
		<node type="OUTPUT_MATERIAL" height="100" width="120" width_hidden="42" loc="1644, 265" />
	</nodes>
	<links>
		<link to="4" input="0" from="1" output="0" />
		<link to="1" input="2" from="0" output="0" />
		<link to="0" input="2" from="2" output="0" />
		<link to="2" input="0" from="3" output="2" />
	</links>
	<scripts>
		<script name="MABRain.osl" id="0">
/*<br /> * MABRain.osl by Michel J. Anders (c)2013<br /> * from https://github.com/sambler/osl-shaders<br /> *<br /> * license: gplv3<br /> *<br /> * original script from -<br /> * Open Shading Language for Blender by Michel J. Anders<br /> *<br /> */<br /><br />#include &quot;stdosl.h&quot;<br /><br />shader MABRain(<br />        point Vector = P,<br />        float Scale = 5.0,<br /><br />        int Drops = 4,<br />        float Time = 0.1,<br />        float StartTime = 0.0,<br />        float EndTime = 2.0,<br />        float Amplitude = 0.4,<br />        float Wavelength = 0.3,<br />        float Spread = 0.1,<br />        float Limit = 0.8,<br />        float Damping = 0.3,<br /><br />        output float Height = 0 )<br />{<br />    float L = max(ceil(abs(Limit)),1);<br /><br />    vector Pos = Vector * Scale;<br />    vector ip = floor(Pos);<br /><br />    float h = 0;<br />    for(float dx = -L; dx&lt;=L; dx++) {<br />    for(float dy = -L; dy&lt;=L; dy++) {<br />        vector p = ip+vector(dx,dy,0);<br />        for(int i = 0; i&lt;Drops; i++) {<br />            vector center = noise(&quot;cell&quot;,p,i) + p;<br />            float start = (EndTime-StartTime)*noise(&quot;cell&quot;,p,-i-1);<br />            float peak = Time - start;<br />            float dc = hypot(Pos[0]-center[0],Pos[1]-center[1]);<br />            float t = dc/Wavelength;<br />            float a = Amplitude*cos(t);<br />            float dr = (Limit-peak)/Limit;<br />            float dm = pow(dr,Damping);<br />            dm *= exp(-(dc-peak)*(dc-peak)/Spread);<br />            if( dm &gt;0 ) {<br />                h += a*dm;<br />            }<br />        }<br />    }<br />    }<br />    Height = h;<br />}<br />
		</script>
	</scripts>
</material>
