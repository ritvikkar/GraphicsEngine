<?xml version="1.0" encoding="UTF-8"?>
<material name="MABConcrete" view_color="rgb(0.80000, 0.80000, 0.80000)" sample_lamp="True">
	<nodes>
		<node type="OUTPUT_MATERIAL" height="100" width="120" width_hidden="42" loc="1723, 275" />
		<node type="BSDF_DIFFUSE" color="rgba(0.80000, 0.80000, 0.80000, 1.0)" roughness="0.20000" height="100" width="150" width_hidden="42" loc="1339, 347" />
		<node type="MIX_SHADER" fac="0.15999" height="100" width="140" width_hidden="42" loc="1550, 278" />
		<node type="BSDF_GLOSSY" distribution="BECKMANN" color="rgba(0.80000, 0.80000, 0.80000, 1.0)" roughness="0.10000" height="100" width="150" width_hidden="42" loc="1333, 203" />
		<node type="SCRIPT" mode="INTERNAL" script="0" vector="Vector(0.0, 0.0, 0.0)" scale="3.0" cement1="rgba(0.89999, 0.89999, 0.89999, 1.0)" cement2="rgba(0.75, 0.75, 0.75, 1.0)" sand1="rgba(0.34999, 0.34999, 0.34999, 1.0)" sand2="rgba(0.41999, 0.41999, 0.41999, 1.0)" sand="0.5" sandsize="0.10000" sanddensity="4.0" grainhigh="0.5" grainlow="0.10000" split1="rgba(0.69999, 0.69999, 0.69999, 1.0)" split2="rgba(0.69999, 0.60000, 0.5, 1.0)" split="0.20000" splitsize="0.11999" splitgaps="0.30000" pebble1="rgba(0.80000, 0.80000, 0.80000, 1.0)" pebble2="rgba(0.80000, 0.69999, 0.60000, 1.0)" pebbles="0.20000" pebblesize="1.5" pebblegaps="0.05999" stain1="rgba(0.30000, 0.30000, 0.30000, 1.0)" stain2="rgba(0.30000, 0.40000, 0.30000, 1.0)" stains="0.40000" stainsize="4.0" stainmix="0.05000" height="100" width="199" width_hidden="42" loc="871, 329" />
		<node type="TEX_COORD" dupli="False" height="100" width="140" width_hidden="42" loc="680, 164" />
		<node type="BUMP" strength="0.40000" height="100" width="140" width_hidden="42" loc="1123, 275" />
	</nodes>
	<links>
		<link to="0" input="0" from="2" output="0" />
		<link to="2" input="1" from="1" output="0" />
		<link to="1" input="2" from="6" output="0" />
		<link to="3" input="2" from="6" output="0" />
		<link to="1" input="0" from="4" output="0" />
		<link to="6" input="2" from="4" output="2" />
		<link to="4" input="0" from="5" output="2" />
		<link to="2" input="2" from="3" output="0" />
	</links>
	<scripts>
		<script name="MABConcrete.osl" id="0">
/*<br /> * MABConcrete.osl by Michel J. Anders (c)2013<br /> * from https://github.com/sambler/osl-shaders<br /> *<br /> * license: gplv3<br /> *<br /> * original script from -<br /> * Open Shading Language for Blender by Michel J. Anders<br /> *<br /> */<br /><br />#include &quot;stdosl.h&quot;<br /><br />point voronoi3d(point p, float t)<br />{<br />    int xx, yy, zz, xi, yi, zi;<br /><br />    xi = (int)floor(p[0]);<br />    yi = (int)floor(p[1]);<br />    zi = (int)floor(p[2]);<br /><br />    float dbest = 1e10;<br />    point pbest = 1e10;<br />    for (xx = xi - 1; xx &lt;= xi + 1; xx++) {<br />        for (yy = yi - 1; yy &lt;= yi + 1; yy++) {<br />            for (zz = zi - 1; zz &lt;= zi + 1; zz++) {<br />                vector ip = vector(xx, yy, zz);<br />                point  vp = ip + noise(&quot;cell&quot;, ip, t);<br />                vector dp = p - vp;<br />                float  d  = dot(dp,dp);<br />                if (d &lt; dbest) {<br />                    dbest = d;<br />                    pbest = vp;<br />                }<br />            }<br />        }<br />    }<br />    return pbest;<br />}<br /><br />float voronoi(point p, float t, output point pos, output float v1, output float v2){<br />  pos = voronoi3d(p, t);<br />  v1 = noise(&quot;cell&quot;,pos,t-713);<br />  v2 = noise(&quot;cell&quot;,pos,t+317);<br />  return noise(&quot;cell&quot;,pos,t+173);<br />}<br /><br />shader MABConcrete(<br />        point Vector     = P,<br />        float Scale      = 1.0,<br /><br />        color Cement1    = 0.9,<br />        color Cement2    = 0.75,<br />        color Sand1      = 0.35,<br />        color Sand2      = 0.42,<br />        float Sand       = 0.5,<br />        float SandSize   = 0.1,<br />        float SandDensity= 4.0,<br />        float GrainHigh  = 0.5,<br />        float GrainLow   = 0.1,<br /><br />        color Split1     = 0.7,<br />        color Split2     = color(0.7,0.6,0.5),<br />        float Split      = 0.2,<br />        float SplitSize  = 0.12,<br />        float SplitGaps  = 0.3,<br /><br />        color Pebble1    = 0.8,<br />        color Pebble2    = color(0.8,0.7,0.6),<br />        float Pebbles    = 0.2,<br />        float PebbleSize = 1.5,<br />        float PebbleGaps = 0.06,<br /><br />        color Stain1     = 0.3,<br />        color Stain2     = color(0.3,0.4,0.3),<br />        float Stains     = 0.4,<br />        float StainSize  = 4.0,<br />        float StainMix   = 0.05,<br /><br />        output color Col     = 0.5,<br />        output normal Normal = 0,<br />        output float Disp    = 0.0,<br />        output int IsCement  = 1,<br />        output int IsPebble  = 0,<br />        output int IsSplit   = 0,<br />        output int IsSand    = 0 )<br />{<br />    point p = Vector * Scale;<br />    Col = mix(Cement1,Cement2,noise(&quot;uperlin&quot;,p,0));<br /><br />    float pebblenoise = noise(&quot;uperlin&quot;,p/PebbleSize,1);<br />    if(Pebbles &gt; pebblenoise) {<br />        Disp = sqrt(pebblenoise-Pebbles);<br />        if(PebbleGaps &lt; noise(&quot;cell&quot;,p/PebbleSize,2)) {<br />            IsCement = 0;<br />            IsPebble = 1;<br />            Col = mix(Pebble1, Pebble2, pow(noise(&quot;uperlin&quot;,p/PebbleSize, 3), 2));<br />        }else{<br />            Disp = -Disp;<br />        }<br />    }else{<br />        // angular split<br />        float peakheight, gapvalue;<br />        point splitpos;<br />        float splitnoise = voronoi(p/SplitSize, 4, splitpos, peakheight, gapvalue);<br />        if(Split &gt; splitnoise) {<br />            Disp = peakheight*(1-distance(p, splitpos));<br />            if(SplitGaps &lt; gapvalue) {<br />                IsCement = 0;<br />                IsSplit = 1;<br />                Col = mix(Split1, Split2, pow(noise(&quot;uperlin&quot;, p/SplitSize, 6), 2));<br />            }else{<br />                Disp = -Disp;<br />            }<br />        }else{<br />            // sandgrains<br />            int sandvisible = Sand &gt; noise(&quot;uperlin&quot;, p/SandSize, 7);<br />            if(sandvisible) {<br />                float grain = noise(&quot;gabor&quot;, p, 8, &quot;bandwidth&quot;, 4,<br />                        &quot;anisotropic&quot;, 2, &quot;direction&quot;, vector(SandDensity, 0, 0));<br />                if(grain &gt; GrainLow &amp;&amp; grain &lt; GrainHigh) {<br />                    IsCement = 0;<br />                    IsSand = 1;<br />                    Col   = mix(Sand1, Sand2, noise(&quot;uperlin&quot;, p, 9));<br />                    Disp  = noise(&quot;cell&quot;, (p*SandDensity)*0.001*grain, 10);<br />                    Normal= noise(&quot;cell&quot;, (p*SandDensity)*0.001*grain, 11);<br />                    Normal[2]=1;<br />                    Normal = normalize(Normal);<br />                }<br />            }<br />        }<br />    }<br />    // overall color stain<br />    float stainnoise = noise(&quot;uperlin&quot;, p/StainSize, 12);<br />    if(Stains &gt; stainnoise){<br />        color StainCol = mix(Stain1, Stain2, noise(&quot;uperlin&quot;, p, 13));<br />        Col = mix(Col, StainCol, StainMix);<br />    }<br />}<br />
		</script>
	</scripts>
</material>
