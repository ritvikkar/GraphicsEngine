<?xml version="1.0" encoding="UTF-8"?>
<material view_color="rgb(0.80000, 0.80000, 0.80000)" sample_lamp="True">
	<nodes>
		<node type="MATH" operation="MULTIPLY" use_clamp="False" value1="0.5" value2="203.31300" width="140" loc="-505, 398" />
		<node type="MATH" hide="True" operation="SINE" use_clamp="False" value1="0.5" value2="0.5" width="42" loc="-326, 354" />
		<node type="TEX_WAVE" wave="BANDS" scale="1.0" distortion="0.0" detail="2.0" detail_scale="1.0" width="150" loc="-508, 61" />
		<node type="BSDF_DIFFUSE" color="rgba(0.80000, 0.80000, 0.80000, 1.0)" roughness="0.0" width="150" loc="-302, 96" />
		<node type="MIX_SHADER" fac="0.5" width="140" loc="0, 265" />
		<node type="BSDF_DIFFUSE" color="rgba(0.80000, 0.80000, 0.80000, 1.0)" roughness="0.0" width="150" loc="-208, 354" />
		<node type="OUTPUT_MATERIAL" width="140" loc="196, 261" />
		<node type="VECT_MATH" operation="DOT_PRODUCT" vector1="Vector(0.5, 0.5, 0.5)" vector2="Vector(0.5, 0.5, 0.5)" width="140" loc="-702, 336" />
		<node type="MATH" operation="LESS_THAN" use_clamp="False" value1="0.5" value2="0.89999" width="140" loc="-505, 235" />
		<node type="SCRIPT" mode="INTERNAL" script="0" pos="Vector(0.0, 0.0, 0.0)" scale="4.99999" density="3.0" falloff="1.49999" knots="0.05000" knotsize="1.59999" distortion="3.0" width="185" loc="-957, 218" />
	</nodes>
	<links>
		<link to="0" input="0" from="7" output="1" />
		<link to="1" input="0" from="0" output="0" />
		<link to="5" input="0" from="1" output="0" />
		<link to="4" input="0" from="8" output="0" />
		<link to="4" input="2" from="3" output="0" />
		<link to="4" input="1" from="5" output="0" />
		<link to="3" input="0" from="2" output="0" />
		<link to="6" input="0" from="4" output="0" />
		<link to="2" input="0" from="9" output="0" />
		<link to="7" input="1" from="9" output="0" />
		<link to="7" input="0" from="9" output="0" />
		<link to="8" input="0" from="9" output="1" />
	</links>
	<scripts>
		<script name="MAWoodKnots2.osl" id="0">
/*<br /> * MAWoodKnots2.osl by Michel J. Anders (c)2013<br /> * from https://github.com/sambler/osl-shaders<br /> *<br /> * license: cc-by-sa<br /> *<br /> * original script from -<br /> * http://blenderthings.blogspot.com.au/2013/07/OSL-wood-shader-with-knots-for-Blender-Cycles.html<br /> *<br /> */<br /><br />#include &quot;stdosl.h&quot;<br /><br />vector random_sphere(point p, int n, float zdistribution){<br />    float t = M_2PI*noise(&quot;cell&quot;,p,n*2+0);<br />    float u = 2*noise(&quot;cell&quot;,p,n*2+1)-1;<br />    float s,c,a;<br />    sincos(t,s,c);<br />    a = sqrt(1-u*u);<br />    float x = a*c;<br />    float y = a*s;<br />    float z = u*zdistribution;<br />    return vector(x,y,z);<br />}<br /><br />int bend(vector p, vector k, vector kv, float r, float a, float m, output vector B){<br />    vector pk = k - p;<br />    vector t = dot(pk,kv)/dot(kv,kv);<br />    vector D = k + t * kv - p;<br />    float L = length(D);<br />    if( L &lt; r ){<br />        float c = L/r;<br />        float d = m * pow( 1 - c , a);<br />        if( d &lt; L ){<br />            B = d * normalize(D);<br />            return 1;<br />        }else{<br />            B = D;<br />            return 2;<br />        }<br />    }<br />    return 0;<br />}<br /><br />shader MAWoodKnots2(<br />  vector Pos = P,<br />  float Scale = 1.5,<br /><br />  float Density = 2.9,<br />  float Falloff = 2.0,<br />  float Knots=0.1,<br />  float KnotSize = 1.0,<br />  float Distortion=1.0,<br /><br />  output vector Vec = P,<br />  output float Fac = 0 )<br />{<br />    vector p = Scale * Pos;<br />    vector sdp = 0;<br /><br />    float TR = ceil(Density);<br />    for(float dx=-TR; dx &lt;= TR; dx++){<br />        for(float dy=-TR; dy &lt;= TR; dy++){<br />            for(float dz=-TR; dz &lt;= TR; dz++){<br />                vector ip = floor(p)+vector(dx,dy,dz);<br />                for(int ik=0; ik &lt; (int)Knots; ik++){<br />                    vector k = noise(&quot;cell&quot;,ip,ik);<br />                    vector kv= random_sphere(ip,ik+1000,Distortion);<br />                    vector dp= 0;<br />                    int ret = bend(p,ip+k,kv,Density,Falloff,KnotSize,dp);<br />                    if(ret != 0){<br />                        Fac=max(Fac,ret==2);<br />                        sdp+=dp;<br />                    }<br />                }<br />                if( noise(&quot;cell&quot;,ip,-1) &lt; mod(Knots,1.0) ){<br />                    vector k = noise(&quot;cell&quot;,ip,-2);<br />                    vector kv= random_sphere(ip,998,Distortion);<br />                    vector dp= 0;<br />                    int ret = bend(p,ip+k,kv,Density,Falloff,KnotSize,dp);<br />                    if(ret != 0){<br />                        Fac=max(Fac,ret==2);<br />                        sdp+=dp;<br />                    }<br />                }<br />            }<br />        }<br />    }<br />    if( Fac &lt; 1 ){<br />        Vec = p + sdp;<br />    }else{<br />        Vec = sdp;<br />    }<br />}<br />
		</script>
	</scripts>
</material>