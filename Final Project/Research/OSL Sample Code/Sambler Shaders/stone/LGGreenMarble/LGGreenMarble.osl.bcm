<?xml version="1.0" encoding="UTF-8"?>
<material view_color="rgb(0.80000, 0.80000, 0.80000)" sample_lamp="True">
	<nodes>
		<node type="OUTPUT_MATERIAL" loc="-4, 346" />
		<node type="MAPPING" translation="Vector(0.0, 0.0, 0.0)" rotation="Vector(0.0, 0.0, 0.0)" scale="Vector(20.0, 20.0, 20.0)" use_min="False" use_max="False" vector="Vector(0.0, 0.0, 0.0)" loc="-553, 334" />
		<node type="TEX_COORD" dupli="False" loc="-789, 315" />
		<node type="SCRIPT" mode="INTERNAL" script="0" vector="Vector(0.0, 0.0, 0.0)" diffuseamt="0.80000" specularcolor="rgba(1.0, 1.0, 1.0, 1.0)" specularamt="0.30000" roughness="0.10999" darkcolor="rgba(0.00999, 0.11999, 0.00400, 1.0)" lightcolor="rgba(0.05999, 0.18000, 0.01999, 1.0)" veincolor="rgba(0.46999, 0.56999, 0.02999, 1.0)" veinfreq="0.69999" sharpness="5.19999" loc="-251, 367" />
	</nodes>
	<links>
		<link to="1" input="0" from="2" output="2" />
		<link to="0" input="0" from="3" output="0" />
		<link to="3" input="0" from="1" output="0" />
	</links>
	<scripts>
		<script name="LGGreenMarble.osl" id="0">
/*<br /> * LGGreenMarble.osl by Shane Ambler<br /> * from https://github.com/sambler/osl-shaders<br /> * <br /> * original script from -<br /> * http://www.renderman.org/RMR/RMRShaders.html<br /> *<br /> * greenmarble.sl -- RenderMan compatible shader for green veined marble.<br /> *<br /> * DESCRIPTION:<br /> *   Makes a marble-like surface using a turbulence function.<br /> *   <br /> * <br /> * PARAMETERS:<br /> *   Ka, Kd, Ks, roughness, specularcolor - work just like the plastic<br /> *   txtscale - overall scaling for the texture<br /> *   darkcolor, lightcolor - colors of the underlying substrate<br /> *   veincolor - color of the bright veins<br /> *   veinfreq - controls the frequency of the veining effects<br /> *   sharpness - how sharp the veins appear<br /> *<br /> *<br /> * AUTHOR: Larry Gritz, the George Washington University<br /> *         email: gritz AT seas DOT gwu DOT edu <br /> *<br /> *<br /> * last modified  11 July 1994 by Larry Gritz<br /> * 21/12/2012 converted to blender osl by Shane Ambler<br /> * <br /> */<br /><br />#include &quot;stdosl.h&quot;<br /><br />shader<br />LGGreenMarble (<br />        vector Vector = P,<br />        float DiffuseAmt = 0.6,<br />        color SpecularColor = color(1.0),<br />        float SpecularAmt = 0.4,<br />        float Roughness = 0.01,<br />        color DarkColor = color(0.01, 0.12, 0.004),<br />        color LightColor = color(0.06, 0.18, 0.02),<br />        color VeinColor = color(0.47, 0.57, 0.03),<br />        float VeinFreq = 1.0,<br />        float Sharpness = 25.0,<br />        output closure color BSDF = diffuse(N) )<br />{<br />#define snoise(x) (2*noise(x)-1)<br />    point PP, offset;<br />    float cmi;<br />    point Nf;<br />    color Ct;<br />    float pixelsize, twice, scale, freq;<br />    float turbsum, turb, i;<br /><br />    PP = transform (&quot;shader&quot;, Vector);<br /><br />    /*<br />    * First calculate the underlying color of the substrate<br />    *    Use turbulence - use frequency clamping<br />    */<br />    pixelsize = sqrt(area(PP));<br />    twice = 2 * pixelsize;<br />    turb = 0;<br />    for (scale = 1; scale &gt; twice; scale /= 2)<br />        turb += scale * abs(noise(PP/scale)-0.5);<br />    if (scale &gt; pixelsize)<br />        turb += clamp ((scale/pixelsize)-1, 0, 1) * scale * abs(noise(PP/scale)-0.5);<br /><br />    Ct = mix (DarkColor, LightColor, smoothstep(0.1,.35,turb));<br /><br />    /*<br />    * Now we layer on the veins<br />    */<br /><br />    /* perturb the lookup */<br />    freq = 1;<br />    offset = point(35.2,-21.9,6.25);<br />    /* This offset makes it uncorrelated to the substrate pattern */<br />    for (i = 0;  i &lt; 6;  i += 1) {<br />        offset += (noise (freq * PP) - point(.5,.5,.5))  / freq;<br />        freq *= 2;<br />    }<br />    PP += offset;<br /><br />    /* Now calculate the veining function for the lookup area */<br />    turbsum = 0;  freq = 1;<br />    PP *= VeinFreq;<br />    for (i = 0;  i &lt; 3;  i += 1) {<br />        turb = abs (snoise (PP*freq));<br />        turb = pow (smoothstep (0.8, 1, 1 - turb), Sharpness) / freq;<br />        turbsum += (1-turbsum) * turb;<br />        freq *= 2;<br />    }<br />    turbsum *= smoothstep (-0.1, 0.05, snoise(2*(PP+point(-4.4,8.34,27.1))));<br /><br />    Ct = mix (Ct, VeinColor, turbsum);<br /><br />    /*<br />    * Shade like plastic<br />    */<br /><br />    Nf = normalize(N);<br />    <br />    BSDF = Ct * DiffuseAmt * diffuse(Nf);<br />    BSDF += SpecularColor * SpecularAmt * microfacet_beckmann(Nf,Roughness);<br />}<br /><br /><br /><br />
		</script>
	</scripts>
</material>