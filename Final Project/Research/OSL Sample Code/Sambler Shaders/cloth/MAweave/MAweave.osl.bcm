<?xml version="1.0" encoding="UTF-8"?>
<material view_color="rgb(0.80000, 0.80000, 0.80000)" sample_lamp="True">
	<nodes>
		<node type="MIX_RGB" blend_type="SCREEN" use_clamp="False" fac="0.15000" color1="rgba(0.5, 0.39131, 0.19054, 1.0)" color2="rgba(0.5, 0.5, 0.5, 1.0)" loc="-244, 364" />
		<node type="MAPPING" translation="Vector(0.0, 0.0, 0.0)" rotation="Vector(0.0, 0.0, 0.0)" scale="Vector(50.0, 50.0, 50.0)" use_min="False" use_max="False" vector="Vector(0.0, 0.0, 0.0)" loc="-541, 439" />
		<node type="BSDF_DIFFUSE" color="rgba(0.80000, 0.80000, 0.80000, 1.0)" roughness="0.0" loc="232, 423" />
		<node type="OUTPUT_MATERIAL" loc="843, 297" />
		<node type="MIX_SHADER" fac="0.5" loc="634, 332" />
		<node type="MIX_SHADER" fac="0.15999" loc="424, 408" />
		<node type="BSDF_GLOSSY" distribution="BECKMANN" color="rgba(0.80000, 0.61282, 0.55566, 1.0)" roughness="0.20000" loc="396, 264" />
		<node type="MATH" operation="POWER" use_clamp="False" value1="0.5" value2="0.5" loc="475, 107" />
		<node type="MATH" operation="SUBTRACT" use_clamp="False" value1="0.5" value2="0.5" loc="311, 102" />
		<node type="MATH" operation="ADD" use_clamp="False" value1="0.5" value2="0.5" loc="650, 142" />
		<node type="TEX_COORD" dupli="False" loc="-764, 427" />
		<node type="TEX_NOISE" scale="545.0" detail="2.0" distortion="5.0" loc="-477, 122" />
		<node type="MIX_RGB" blend_type="SCREEN" use_clamp="False" fac="0.15000" color1="rgba(0.29999, 0.11030, 0.09969, 1.0)" color2="rgba(0.5, 0.5, 0.5, 1.0)" loc="-238, 158" />
		<node type="SCRIPT" mode="INTERNAL" script="0" vector="Vector(0.0, 0.0, 0.0)" warpcolor="rgba(0.80000, 0.0, 0.0, 1.0)" weftcolor="rgba(0.0, 0.80000, 0.0, 1.0)" skip="1" underrun="2" overrun="1" warpwidth="0.80000" weftwidth="0.80000" loc="-56, 409" />
	</nodes>
	<links>
		<link to="12" input="2" from="11" output="1" />
		<link to="0" input="2" from="11" output="1" />
		<link to="3" input="0" from="4" output="0" />
		<link to="4" input="1" from="5" output="0" />
		<link to="5" input="1" from="2" output="0" />
		<link to="4" input="2" from="6" output="0" />
		<link to="3" input="2" from="9" output="0" />
		<link to="9" input="0" from="7" output="0" />
		<link to="7" input="0" from="8" output="0" />
		<link to="9" input="1" from="11" output="1" />
		<link to="1" input="0" from="10" output="2" />
		<link to="2" input="0" from="13" output="0" />
		<link to="8" input="1" from="13" output="2" />
		<link to="13" input="1" from="0" output="0" />
		<link to="13" input="2" from="12" output="0" />
		<link to="13" input="0" from="1" output="0" />
	</links>
	<scripts>
		<script name="MAweave.osl" id="0">
/*<br /> * MAWeave.osl by Michel J. Anders (c)2012<br /> * from https://github.com/sambler/osl-shaders<br /> *<br /> * license: cc-by-sa<br /> *<br /> * original script from -<br /> * http://blenderthings.blogspot.com.au/2012/12/a-fabric-osl-shader-for-blender-cycles.html<br /> *<br /> */<br /><br />#include &quot;stdosl.h&quot;<br /><br />// greatest common divisor<br />int gcd(int A, int B){<br />    int a=A, b=B;<br />    if (a == 0) { return b; }<br />    while (b != 0) {<br />        if (a &gt; b) {<br />            a = a - b;<br />        } else {<br />            b = b - a;<br />        }<br />    }<br />    return a;<br />}<br /><br />// smallest common multiple (assumes a, b &gt; 0 )<br />int scm(int a, int b){ return a*b/gcd(a,b); }<br /><br />shader MAweave(<br />        vector Vector = vector(0),<br />        color WarpColor = color(0.8,0,0),<br />        color WeftColor = color(0,0.8,0),<br />        int skip = 1,<br />        int underrun = 1,<br />        int overrun = 1,<br />        float WarpWidth = 0.8,<br />        float WeftWidth = 0.8,<br />        output color Color = 0,<br />        output int Index = 0,<br />        output float Dist = 0)<br />{<br />    int ny = underrun + overrun;<br />    int nx = scm(skip,ny);<br />    <br />    float x = mod(Vector[0],1.0);<br />    float y = mod(Vector[1],1.0);<br />    <br />    int ix = int(floor(x*nx));<br />    int iy = int(floor(y*ny));<br />    <br />    float cx = mod(x*nx,1.0);<br />    float cy = mod(y*ny,1.0);<br />    <br />    int top;<br />    top = ((iy+skip*ix)%ny) &lt; overrun;<br />    <br />    float lx = (1-WarpWidth)/2;<br />    float hx = 1-lx;<br />    float ly = (1-WeftWidth)/2;<br />    float hy = 1-lx;<br />    <br />    if (top) {<br />        if ( cx &gt; lx &amp;&amp; cx &lt; hx ){<br />            Index = 1;<br />            Color = WarpColor;<br />            Dist = abs(0.5-cx);<br />        } else if (cy &gt; ly &amp;&amp; cy &lt; hy ){<br />            Index = 2;<br />            Color = WeftColor;<br />            Dist = abs(0.5-cy);<br />        }<br />    } else {<br />        if (cy &gt; ly &amp;&amp; cy &lt; hy ){<br />            Index = 2;<br />            Color = WeftColor;<br />            Dist = abs(0.5-cy); <br />        } else if ( cx &gt; lx &amp;&amp; cx &lt; hx ){<br />            Index = 1;<br />            Color = WarpColor;<br />            Dist = abs(0.5-cx); <br />        }<br />    }<br />}<br /><br />
		</script>
	</scripts>
</material>